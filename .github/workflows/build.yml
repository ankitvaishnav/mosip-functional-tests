name: Functional tests build & dockerization

on:
  push:
    branches:
      - 1.1.1

jobs:
  build:

    runs-on: ubuntu-latest
    steps:
      - name: Clear artifacts
        uses: kolpav/purge-artifacts-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          expire-in: 10mins

      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: maven-settings-xml-action
        uses: whelk-io/maven-settings-xml-action@v10
        with:
          mirrors: '[{ "id": "MavenCentral", "mirrorOf": "central", "url": "https://repo.maven.apache.org/maven2" },{ "id": "Artifactory", "mirrorOf": "artifactory", "url": "http://52.172.8.144:8040/artifactory" }]'
          repositories: '[{ "id": "MavenCentral", "url": "https://repo.maven.apache.org/maven2", "releases": { "enabled": "true" } },{ "id": "Release", "name": "libs-release", "url": "http://52.172.8.144:8040/artifactory/libs-release", "releases": { "enabled": "true" }, "snapshots": { "enabled": "true" } }, { "id": "Snapshots", "name": "libs-snapshot", "url": "http://52.172.8.144:8040/artifactory/libs-snapshot", "releases": { "enabled": "true" }, "snapshots": { "enabled": "true" } }]'

      - name: Setup settings.xml
        run: |
          mvn -v
          cp -f ~/.m2/settings.xml $GITHUB_WORKSPACE/settings.xml
          cat $GITHUB_WORKSPACE/settings.xml

      - name: Build authentication-partnerdemo-service
        run: mvn clean install -Dmaven.test.skip=true -s $GITHUB_WORKSPACE/settings.xml -f authentication-partnerdemo-service/pom.xml

      - name: Build automationtests
        run: mvn clean install -Dmaven.test.skip=true -s $GITHUB_WORKSPACE/settings.xml -f automationtests/pom.xml

      - name: Build docker image
        run: docker build -t $IMAGE_NAME ./automationtests/
        env:
          IMAGE_NAME: ${{ secrets.image_name }}

      - name: Log into docker registry
        run: echo "${{ secrets.docker_password }}" | docker login -u ${{ secrets.docker_user }} --password-stdin

      - name: Push docker image
        run: |
          IMAGE_ID=$NAMESPACE/$IMAGE_NAME
          VERSION=${BRANCH_NAME}
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
        env:
          NAMESPACE: ${{ secrets.docker_namespace }}
          IMAGE_NAME: ${{ secrets.image_name }}
